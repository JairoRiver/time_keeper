// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  "role",
  secret_token_key
) VALUES (
  $1, $2, $3
) RETURNING id, user_identity_id, email, role, email_validated, is_active, secret_token_key, created_at, updated_at
`

type CreateUserParams struct {
	Email          pgtype.Text `json:"email"`
	Role           string      `json:"role"`
	SecretTokenKey string      `json:"secret_token_key"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Role, arg.SecretTokenKey)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.SecretTokenKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_identity_id, email, role, email_validated, is_active, secret_token_key, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.SecretTokenKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_identity_id, email, role, email_validated, is_active, secret_token_key, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.SecretTokenKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByIdentityId = `-- name: GetUserByIdentityId :one
SELECT id, user_identity_id, email, role, email_validated, is_active, secret_token_key, created_at, updated_at FROM users
WHERE user_identity_id = $1 LIMIT 1
`

func (q *Queries) GetUserByIdentityId(ctx context.Context, userIdentityID pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByIdentityId, userIdentityID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.SecretTokenKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSecretById = `-- name: GetUserSecretById :one
SELECT id, secret_token_key 
FROM users
WHERE id = $1 LIMIT 1
`

type GetUserSecretByIdRow struct {
	ID             uuid.UUID `json:"id"`
	SecretTokenKey string    `json:"secret_token_key"`
}

func (q *Queries) GetUserSecretById(ctx context.Context, id uuid.UUID) (GetUserSecretByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserSecretById, id)
	var i GetUserSecretByIdRow
	err := row.Scan(&i.ID, &i.SecretTokenKey)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = COALESCE($1, email),
  "role" = COALESCE($2, role),
  user_identity_id = COALESCE($3, user_identity_id),
  email_validated = COALESCE($4, email_validated),
  is_active = COALESCE($5, is_active),
  secret_token_key = COALESCE($6, secret_token_key),
  updated_at = NOW()
WHERE
  id = $7
RETURNING id, user_identity_id, email, role, email_validated, is_active, secret_token_key, created_at, updated_at
`

type UpdateUserParams struct {
	Email          pgtype.Text `json:"email"`
	Role           pgtype.Text `json:"role"`
	UserIdentityID pgtype.UUID `json:"user_identity_id"`
	EmailValidated pgtype.Bool `json:"email_validated"`
	IsActive       pgtype.Bool `json:"is_active"`
	SecretTokenKey pgtype.Text `json:"secret_token_key"`
	ID             uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Role,
		arg.UserIdentityID,
		arg.EmailValidated,
		arg.IsActive,
		arg.SecretTokenKey,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.SecretTokenKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
