// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  email,
  "role"
) VALUES (
  $1, $2
) RETURNING id, email, role, email_validated, is_active, created_at, updated_at
`

type CreateUserParams struct {
	Email pgtype.Text `json:"email"`
	Role  string      `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Role)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, role, email_validated, is_active, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, role, email_validated, is_active, created_at, updated_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = COALESCE($1, email),
  "role" = COALESCE($2, role),
  email_validated = COALESCE($3, email_validated),
  is_active = COALESCE($4, is_active),
  updated_at = NOW()
WHERE
  id = $5
RETURNING id, email, role, email_validated, is_active, created_at, updated_at
`

type UpdateUserParams struct {
	Email          pgtype.Text `json:"email"`
	Role           pgtype.Text `json:"role"`
	EmailValidated pgtype.Bool `json:"email_validated"`
	IsActive       pgtype.Bool `json:"is_active"`
	ID             uuid.UUID   `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Email,
		arg.Role,
		arg.EmailValidated,
		arg.IsActive,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Role,
		&i.EmailValidated,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
